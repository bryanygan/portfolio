---
import Layout from '../layouts/Layout.astro';
import Section from '../components/ui/Section.astro';

const title = 'Bot Status Monitor';
const description = 'Real-time status monitoring for Discord bot operations';
---

<Layout title={title} description={description}>
  <Section id="bot-status" title="Bot Status Monitor" subtitle="Real-time monitoring and control">
    <div class="max-w-6xl mx-auto space-y-6">

      <!-- Status Overview Cards -->
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6">

        <!-- Uptime Card -->
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 border border-gray-200 dark:border-gray-700">
          <div class="flex items-center justify-between mb-2">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Uptime</h3>
            <div id="status-indicator" class="w-3 h-3 rounded-full bg-gray-400"></div>
          </div>
          <p id="uptime" class="text-3xl font-bold text-primary dark:text-sky-400">--</p>
          <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">
            Started: <span id="start-time">--</span>
          </p>
        </div>

        <!-- Pool Status Card -->
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 border border-gray-200 dark:border-gray-700">
          <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Pool Status</h3>
          <div class="space-y-2">
            <div class="flex justify-between">
              <span class="text-gray-600 dark:text-gray-400">Cards:</span>
              <span id="pool-cards" class="font-semibold text-gray-900 dark:text-white">--</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-600 dark:text-gray-400">Main Emails:</span>
              <span id="pool-emails-main" class="font-semibold text-gray-900 dark:text-white">--</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-600 dark:text-gray-400">Fusion Emails:</span>
              <span id="pool-emails-fusion" class="font-semibold text-gray-900 dark:text-white">--</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-600 dark:text-gray-400">Wool Emails:</span>
              <span id="pool-emails-wool" class="font-semibold text-gray-900 dark:text-white">--</span>
            </div>
          </div>
        </div>

        <!-- System Metrics Card -->
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 border border-gray-200 dark:border-gray-700">
          <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">System Metrics</h3>
          <div class="space-y-2">
            <div class="flex justify-between">
              <span class="text-gray-600 dark:text-gray-400">CPU:</span>
              <span id="cpu-usage" class="font-semibold text-gray-900 dark:text-white">--</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-600 dark:text-gray-400">Memory:</span>
              <span id="memory-usage" class="font-semibold text-gray-900 dark:text-white">--</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-600 dark:text-gray-400">Threads:</span>
              <span id="threads" class="font-semibold text-gray-900 dark:text-white">--</span>
            </div>
          </div>
        </div>

      </div>

      <!-- Last Command Card -->
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 border border-gray-200 dark:border-gray-700">
        <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Last Command Executed</h3>
        <div id="last-command-content" class="space-y-2">
          <p class="text-gray-600 dark:text-gray-400">No commands executed yet</p>
        </div>
      </div>

      <!-- Recent Logs -->
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 border border-gray-200 dark:border-gray-700">
        <div class="flex justify-between items-center mb-4">
          <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Recent Logs</h3>
          <button
            id="refresh-logs"
            class="px-4 py-2 bg-primary dark:bg-sky-600 text-white rounded-lg hover:bg-blue-700 dark:hover:bg-sky-700 transition-colors"
          >
            Refresh
          </button>
        </div>
        <div id="logs-container" class="space-y-2 max-h-96 overflow-y-auto">
          <p class="text-gray-600 dark:text-gray-400">Loading logs...</p>
        </div>
      </div>

      <!-- Control Panel -->
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 border border-gray-200 dark:border-gray-700">
        <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Control Panel</h3>

        <div class="space-y-4">
          <!-- API Configuration -->
          <div>
            <label for="api-url" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Bot API URL
            </label>
            <input
              type="text"
              id="api-url"
              placeholder="http://localhost:5000 or your deployed URL"
              class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary dark:focus:ring-sky-500"
            />
          </div>

          <!-- API Key (for restart) -->
          <div>
            <label for="api-key" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              API Key (required for restart)
            </label>
            <input
              type="password"
              id="api-key"
              placeholder="Enter your STATUS_API_KEY"
              class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary dark:focus:ring-sky-500"
            />
          </div>

          <!-- Restart Button -->
          <div class="flex gap-4">
            <button
              id="restart-btn"
              class="px-6 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors font-semibold disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Restart Bot
            </button>
            <button
              id="save-config-btn"
              class="px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors font-semibold"
            >
              Save Configuration
            </button>
          </div>

          <!-- Restart Status -->
          <div id="restart-status" class="hidden">
            <div class="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4">
              <div class="flex items-center gap-3">
                <div class="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600"></div>
                <div>
                  <p class="font-semibold text-blue-900 dark:text-blue-100" id="restart-status-title">Restarting...</p>
                  <p class="text-sm text-blue-700 dark:text-blue-300" id="restart-status-message">Please wait...</p>
                </div>
              </div>
            </div>
          </div>

          <!-- Error Display -->
          <div id="error-display" class="hidden">
            <div class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4">
              <p class="font-semibold text-red-900 dark:text-red-100">Error</p>
              <p class="text-sm text-red-700 dark:text-red-300" id="error-message"></p>
            </div>
          </div>
        </div>
      </div>

    </div>
  </Section>
</Layout>

<script>
  // Configuration - Default to Railway production URL
  const DEFAULT_API_URL = 'https://zreatsbot-production.up.railway.app';
  let API_URL = '';
  let API_KEY = '';
  let eventSource: EventSource | null = null;

  // Uptime tracking
  let botStartTime: Date | null = null;
  let uptimeSecondsBase: number = 0; // Uptime in seconds from API
  let lastFetchTime: Date | null = null; // When we last fetched from API
  let uptimeInterval: number | null = null;

  // Load configuration from localStorage
  function loadConfig() {
    const savedUrl = localStorage.getItem('bot-api-url');
    const savedKey = localStorage.getItem('bot-api-key');

    if (savedUrl) {
      API_URL = savedUrl;
      (document.getElementById('api-url') as HTMLInputElement).value = savedUrl;
    } else {
      // Use default Railway URL if not configured
      API_URL = DEFAULT_API_URL;
      (document.getElementById('api-url') as HTMLInputElement).value = DEFAULT_API_URL;
    }

    if (savedKey) {
      API_KEY = savedKey;
      (document.getElementById('api-key') as HTMLInputElement).value = savedKey;
    }
  }

  // Save configuration to localStorage
  function saveConfig() {
    const urlInput = document.getElementById('api-url') as HTMLInputElement;
    const keyInput = document.getElementById('api-key') as HTMLInputElement;

    API_URL = urlInput.value.trim();
    API_KEY = keyInput.value.trim();

    localStorage.setItem('bot-api-url', API_URL);
    localStorage.setItem('bot-api-key', API_KEY);

    showSuccess('Configuration saved!');

    // Reconnect with new URL
    if (eventSource) {
      eventSource.close();
    }
    connectSSE();
    fetchAllData();
  }

  // Format uptime duration from seconds
  function formatUptimeFromSeconds(totalSeconds: number): string {
    const days = Math.floor(totalSeconds / (60 * 60 * 24));
    const hours = Math.floor((totalSeconds % (60 * 60 * 24)) / (60 * 60));
    const minutes = Math.floor((totalSeconds % (60 * 60)) / 60);
    const seconds = Math.floor(totalSeconds % 60);

    if (days > 0) {
      return `${days}d ${hours}h ${minutes}m ${seconds}s`;
    } else if (hours > 0) {
      return `${hours}h ${minutes}m ${seconds}s`;
    } else if (minutes > 0) {
      return `${minutes}m ${seconds}s`;
    } else {
      return `${seconds}s`;
    }
  }

  // Calculate current uptime (base from API + elapsed time since fetch)
  function getCurrentUptimeSeconds(): number {
    if (!lastFetchTime) return uptimeSecondsBase;

    const now = new Date();
    const elapsedSinceFetch = (now.getTime() - lastFetchTime.getTime()) / 1000;
    return uptimeSecondsBase + elapsedSinceFetch;
  }

  // Update uptime display every second
  function updateUptimeDisplay() {
    const uptimeElement = document.getElementById('uptime');
    if (uptimeElement) {
      const currentUptime = getCurrentUptimeSeconds();
      uptimeElement.textContent = formatUptimeFromSeconds(currentUptime);
    }
  }

  // Start uptime ticker
  function startUptimeTicker() {
    // Clear any existing ticker to prevent multiple intervals
    if (uptimeInterval) {
      clearInterval(uptimeInterval);
      uptimeInterval = null;
    }

    // Update immediately
    updateUptimeDisplay();

    // Then update every second
    uptimeInterval = setInterval(updateUptimeDisplay, 1000);
    console.log('[Bot Status] Uptime ticker started');
  }

  // Fetch status data
  async function fetchStatus() {
    if (!API_URL) return;

    try {
      console.log(`[Bot Status] Fetching from: ${API_URL}/status`);
      const response = await fetch(`${API_URL}/status`);

      if (!response.ok) {
        console.error(`[Bot Status] HTTP Error: ${response.status} ${response.statusText}`);
        throw new Error(`HTTP ${response.status}`);
      }

      const data = await response.json();
      console.log('[Bot Status] Received data:', data);

      // Store uptime seconds from API and current time
      if (data.uptime) {
        // Use seconds from API (more reliable than parsing timestamps)
        if (typeof data.uptime.seconds === 'number') {
          uptimeSecondsBase = data.uptime.seconds;
          lastFetchTime = new Date();

          // Calculate start time for display
          botStartTime = new Date(lastFetchTime.getTime() - (uptimeSecondsBase * 1000));
          document.getElementById('start-time')!.textContent = botStartTime.toLocaleString();

          console.log('[Bot Status] Uptime seconds:', uptimeSecondsBase);
          console.log('[Bot Status] Calculated start time:', botStartTime.toLocaleString());

          // Start or restart ticker
          startUptimeTicker();
        }
      }

      // Update system metrics
      document.getElementById('cpu-usage')!.textContent = `${data.system.cpu_percent}%`;
      document.getElementById('memory-usage')!.textContent = `${data.system.memory_mb} MB`;
      document.getElementById('threads')!.textContent = data.system.threads.toString();

      // Update status indicator
      const indicator = document.getElementById('status-indicator')!;
      indicator.classList.remove('bg-gray-400', 'bg-green-500', 'bg-red-500');
      indicator.classList.add('bg-green-500');

      // Update last command
      if (data.last_command) {
        updateLastCommand(data.last_command);
      }
    } catch (error) {
      console.error('[Bot Status] Error fetching status:', error);
      document.getElementById('status-indicator')!.classList.add('bg-red-500');

      // Check if it's a CORS error
      if (error instanceof TypeError && error.message.includes('fetch')) {
        console.error('[Bot Status] Possible CORS issue. Check Railway CORS_ORIGINS setting.');
      }
    }
  }

  // Fetch pool counts
  async function fetchPools() {
    if (!API_URL) return;

    try {
      console.log(`[Bot Status] Fetching pools from: ${API_URL}/pools`);
      const response = await fetch(`${API_URL}/pools`);
      const data = await response.json();
      console.log('[Bot Status] Pools data:', data);

      if (data.success) {
        document.getElementById('pool-cards')!.textContent = data.pools.cards.toString();
        document.getElementById('pool-emails-main')!.textContent = data.pools.emails.main.toString();
        document.getElementById('pool-emails-fusion')!.textContent = data.pools.emails.fusion.toString();
        document.getElementById('pool-emails-wool')!.textContent = data.pools.emails.wool.toString();
      }
    } catch (error) {
      console.error('Error fetching pools:', error);
    }
  }

  // Fetch logs
  async function fetchLogs() {
    if (!API_URL) return;

    try {
      const response = await fetch(`${API_URL}/logs?limit=20`);
      const data = await response.json();

      const container = document.getElementById('logs-container')!;

      if (data.success && data.logs.length > 0) {
        container.innerHTML = data.logs.map((log: any) => `
          <div class="bg-gray-50 dark:bg-gray-700/50 rounded-lg p-3 border border-gray-200 dark:border-gray-600">
            <div class="flex justify-between items-start">
              <span class="font-medium text-gray-900 dark:text-white">${log.command_type}</span>
              <span class="text-xs text-gray-500 dark:text-gray-400">${new Date(log.timestamp).toLocaleString()}</span>
            </div>
            ${log.email_used ? `<p class="text-sm text-gray-600 dark:text-gray-400 mt-1">Email: ${log.email_used} (${log.email_pool})</p>` : ''}
          </div>
        `).join('');
      } else {
        container.innerHTML = '<p class="text-gray-600 dark:text-gray-400">No logs available</p>';
      }
    } catch (error) {
      console.error('Error fetching logs:', error);
    }
  }

  // Update last command display
  function updateLastCommand(command: any) {
    const container = document.getElementById('last-command-content')!;
    container.innerHTML = `
      <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
        <div>
          <p class="text-xs text-gray-500 dark:text-gray-400">Command</p>
          <p class="font-semibold text-gray-900 dark:text-white">${command.type}</p>
        </div>
        <div>
          <p class="text-xs text-gray-500 dark:text-gray-400">User</p>
          <p class="font-semibold text-gray-900 dark:text-white">${command.user}</p>
        </div>
        <div>
          <p class="text-xs text-gray-500 dark:text-gray-400">Channel</p>
          <p class="font-semibold text-gray-900 dark:text-white">${command.channel}</p>
        </div>
        <div>
          <p class="text-xs text-gray-500 dark:text-gray-400">Time</p>
          <p class="font-semibold text-gray-900 dark:text-white">${new Date(command.timestamp).toLocaleTimeString()}</p>
        </div>
      </div>
    `;
  }

  // Fetch all data
  function fetchAllData() {
    fetchStatus();
    fetchPools();
    fetchLogs();
  }

  // Connect to SSE stream
  function connectSSE() {
    if (!API_URL) return;

    eventSource = new EventSource(`${API_URL}/stream`);

    eventSource.onmessage = (event) => {
      const data = JSON.parse(event.data);

      if (data.type === 'heartbeat') {
        document.getElementById('uptime')!.textContent = data.uptime;
      } else if (data.type === 'restart_requested') {
        showRestartStatus('Restart Requested', data.data.reason);
      } else if (data.type === 'restart_progress') {
        showRestartStatus('Restarting...', data.data.message);
      } else if (data.type === 'restart_error') {
        showError(data.data.message);
      }
    };

    eventSource.onerror = () => {
      console.log('SSE connection lost, will retry...');
      document.getElementById('status-indicator')!.classList.remove('bg-green-500');
      document.getElementById('status-indicator')!.classList.add('bg-red-500');
    };
  }

  // Restart bot
  async function restartBot() {
    if (!API_URL || !API_KEY) {
      showError('Please configure API URL and API Key first');
      return;
    }

    if (!confirm('Are you sure you want to restart the bot?')) {
      return;
    }

    try {
      showRestartStatus('Requesting Restart', 'Sending restart command...');

      const response = await fetch(`${API_URL}/restart`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-API-Key': API_KEY
        },
        body: JSON.stringify({ reason: 'Manual restart from status page' })
      });

      const data = await response.json();

      if (data.success) {
        showRestartStatus('Restart Initiated', 'Bot is restarting...');

        // Poll for status after restart
        setTimeout(() => {
          pollForReconnection();
        }, 5000);
      } else {
        showError(data.error || 'Failed to restart bot');
      }
    } catch (error: any) {
      showError(`Error: ${error.message}`);
    }
  }

  // Poll for bot reconnection after restart
  function pollForReconnection() {
    let attempts = 0;
    const maxAttempts = 30;

    const interval = setInterval(async () => {
      attempts++;

      try {
        const response = await fetch(`${API_URL}/health`);
        if (response.ok) {
          clearInterval(interval);
          hideRestartStatus();
          showSuccess('Bot restarted successfully!');
          fetchAllData();
        }
      } catch (error) {
        // Bot not ready yet
      }

      if (attempts >= maxAttempts) {
        clearInterval(interval);
        showError('Bot restart timed out. Please check manually.');
      }
    }, 2000);
  }

  // UI helpers
  function showRestartStatus(title: string, message: string) {
    const status = document.getElementById('restart-status')!;
    status.classList.remove('hidden');
    document.getElementById('restart-status-title')!.textContent = title;
    document.getElementById('restart-status-message')!.textContent = message;
    document.getElementById('error-display')!.classList.add('hidden');
  }

  function hideRestartStatus() {
    document.getElementById('restart-status')!.classList.add('hidden');
  }

  function showError(message: string) {
    const error = document.getElementById('error-display')!;
    error.classList.remove('hidden');
    document.getElementById('error-message')!.textContent = message;
    hideRestartStatus();
  }

  function showSuccess(message: string) {
    // You can implement a toast notification here
    alert(message);
  }

  // Event listeners
  document.getElementById('save-config-btn')?.addEventListener('click', saveConfig);
  document.getElementById('restart-btn')?.addEventListener('click', restartBot);
  document.getElementById('refresh-logs')?.addEventListener('click', fetchLogs);

  // Initialize on page load
  loadConfig();
  if (API_URL) {
    connectSSE();
    fetchAllData();

    // Refresh data every 10 seconds
    setInterval(fetchAllData, 10000);
  }
</script>

<style>
  /* Custom scrollbar for logs */
  #logs-container::-webkit-scrollbar {
    width: 8px;
  }

  #logs-container::-webkit-scrollbar-track {
    @apply bg-gray-100 dark:bg-gray-700 rounded;
  }

  #logs-container::-webkit-scrollbar-thumb {
    @apply bg-gray-300 dark:bg-gray-600 rounded;
  }

  #logs-container::-webkit-scrollbar-thumb:hover {
    @apply bg-gray-400 dark:bg-gray-500;
  }
</style>
