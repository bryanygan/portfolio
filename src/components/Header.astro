---
---

<header class="fixed w-full bg-light-bg/80 dark:bg-dark-bg/80 backdrop-blur-md z-50 shadow-sm">
  <div class="container mx-auto px-4">
    <nav class="flex items-center justify-between h-20 relative">
      <!-- Logo -->
      <a href="/" class="flex items-center space-x-2 relative z-10">
        <img src="/assets/svgs/logotransparentblue.png" alt="Bryan Gan" class="w-10 h-10 ">

      </a>

      <!-- Desktop Menu -->
      <div class="hidden md:flex items-center space-x-10">
        <a href="/#about" class="font-medium hover:text-primary transition-colors">About</a>
        <a href="/#projects" class="font-medium hover:text-primary transition-colors">Projects</a>
        <a href="/#experience" class="font-medium hover:text-primary transition-colors">Experience</a>
        <a href="/#contact" class="font-medium hover:text-primary transition-colors">Contact</a>
      </div>

      <!-- Theme toggle button (centered on mobile) -->
      <button
        id="theme-toggle"
        class="p-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors flex items-center justify-center absolute left-1/2 -translate-x-1/2 md:relative md:left-auto md:translate-x-0"
        aria-label="Toggle dark mode"
      >
        <!-- Sun icon for dark mode -->
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 hidden dark:block" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" clip-rule="evenodd"/>
        </svg>
        <!-- Moon icon for light mode -->
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 dark:hidden" viewBox="0 0 20 20" fill="currentColor">
          <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z" />
        </svg>
      </button>

      <!-- Mobile menu button (right side on mobile) -->
      <button
        id="mobile-menu-toggle"
        class="md:hidden p-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors flex items-center justify-center relative z-10"
        aria-label="Toggle mobile menu"
        aria-expanded="false"
        aria-controls="mobile-menu"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
      </button>
    </nav>
  </div>

  <!-- Mobile Menu -->
  <div id="mobile-menu" class="hidden md:hidden p-4 bg-light-bg dark:bg-dark-bg absolute w-full shadow-lg">
    <div class="flex flex-col space-y-4">
      <a href="/#about" class="font-medium py-2 hover:text-primary transition-colors">About</a>
      <a href="/#projects" class="font-medium py-2 hover:text-primary transition-colors">Projects</a>
      <a href="/#experience" class="font-medium py-2 hover:text-primary transition-colors">Experience</a>
      <a href="/#contact" class="font-medium py-2 hover:text-primary transition-colors">Contact</a>
    </div>
  </div>
</header>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
    const mobileMenu = document.getElementById('mobile-menu');

    if (mobileMenuToggle && mobileMenu) {
      mobileMenuToggle.addEventListener('click', () => {
        const isExpanded = mobileMenuToggle.getAttribute('aria-expanded') === 'true';
        mobileMenuToggle.setAttribute('aria-expanded', String(!isExpanded));
        mobileMenu.classList.toggle('hidden');
      });

      // Close menu when clicking on a mobile menu link
      const mobileLinks = mobileMenu.querySelectorAll('a');
      mobileLinks.forEach(link => {
        link.addEventListener('click', () => {
          mobileMenuToggle.setAttribute('aria-expanded', 'false');
          mobileMenu.classList.add('hidden');
        });
      });
    }

    // Smooth scroll for all anchor links
    document.querySelectorAll('a[href^="/#"], a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function (e) {
        const href = this.getAttribute('href');

        // Skip if it's an external link or doesn't have a hash
        if (!href || (!href.startsWith('#') && !href.startsWith('/#'))) return;

        // Extract the target ID (remove leading / and #)
        const targetId = href.replace(/^\/?#/, '');
        const targetElement = document.getElementById(targetId);

        // If we're on homepage and element exists, smooth scroll
        if (targetElement && (window.location.pathname === '/' || window.location.pathname === '')) {
          e.preventDefault();
          targetElement.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });

          // Update URL without page jump
          history.pushState(null, '', href.startsWith('/') ? href : `/#${targetId}`);
        }
        // Otherwise, let the browser navigate to homepage with hash (don't prevent default)
      });
    });

    // Handle hash in URL on page load (for links from other pages)
    if (window.location.hash) {
      // Small delay to ensure page is fully loaded
      setTimeout(() => {
        const targetId = window.location.hash.substring(1);
        const targetElement = document.getElementById(targetId);

        if (targetElement) {
          targetElement.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }
      }, 100);
    }
  });
</script> 